// Generated by CoffeeScript 1.3.3
(function() {
  var Melange;

  Melange = (function() {
    var _ref;

    function Melange() {}

    if ((_ref = Melange.host) == null) {
      Melange.host = location.hostname;
    }

    Melange.config = {
      logToConsole: false,
      preventBubbling: false
    };

    Melange.init = function(options) {
      if (options == null) {
        options = {};
      }
      if (typeof mixpanel === "undefined" || mixpanel === null) {
        return;
      }
      if (options.logToConsole) {
        this.config.logToConsole = options.logToConsole;
      }
      if (options.preventBubbling) {
        this.config.preventBubbling = options.preventBubbling;
      }
      if (options.user) {
        mixpanel.identify(options.user);
      }
      return this.attachEventHandlers();
    };

    Melange.log = function() {
      if (window.console) {
        return console.log.apply(console, arguments);
      }
    };

    Melange.report = function(event_name, properties, callback) {
      if (typeof mixpanel === "undefined" || mixpanel === null) {
        return;
      }
      if (!((event_name != null) && event_name.length > 0)) {
        return;
      }
      if (this.config.logToConsole) {
        this.log(event_name, properties, callback);
      }
      return mixpanel.track(event_name, properties, callback);
    };

    Melange.reportView = function(path, properties) {
      return this.report("viewed " + this.host + path, properties);
    };

    Melange.attachEventHandlers = function() {
      var event_type, event_types, _i, _len, _results;
      event_types = ['blur', 'change', 'click', 'dblclick', 'focus', 'keydown', 'keyup', 'mousedown', 'mouseenter', 'mouseleave', 'mouseout', 'mouseover', 'mouseup'];
      _results = [];
      for (_i = 0, _len = event_types.length; _i < _len; _i++) {
        event_type = event_types[_i];
        _results.push($("[data-melange_trigger='" + event_type + "']").on(event_type, function(event) {
          var event_name, key, properties, value, _ref1;
          properties = {};
          _ref1 = $(this).data();
          for (key in _ref1) {
            value = _ref1[key];
            if (key.match(/melange_/i)) {
              properties[key.replace('melange_', '')] = value;
            }
          }
          event_name = properties.event_name;
          delete properties.trigger;
          delete properties.event_name;
          if ($(this)[0] && $(this)[0].nodeName.match(/input/i)) {
            properties.input_value = $(this).val();
            if (properties.input_value === "") {
              return;
            }
          }
          Melange.report(event_name, properties);
          if (Melange.config.preventBubbling) {
            return false;
          }
        }));
      }
      return _results;
    };

    return Melange;

  })();

  window.Melange = Melange;

}).call(this);
